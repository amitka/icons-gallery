{"version":3,"sources":["hooks/useAppContext.js","components/DirTree/index.js","components/DirTree/DirTree.js","components/GalleryItem/GalleryItem.js","style/icons.js","components/Gallery/SizeBtnControl.js","components/Gallery/Gallery.js","components/Gallery/index.js","components/Preview/Preview.js","components/Preview/index.js","containers/IconsGallery/index.js","containers/IconsGallery/IconsGallery.js","containers/App/App.js","containers/App/index.js","index.js"],"names":["AppContext","React","createContext","DEFAULT_STATE","appIsLoading","icons","categories","selectedCategory","iconToPreview","tags","AppContextProvider","props","useState","state","setState","useEffect","Provider","value","children","Consumer","DirTree","useContext","appState","setAppState","length","rootFolders","Set","map","item","path","substring","indexOf","console","log","className","index","key","classNames","onClick","MemoGalleryItem","memo","name","size","svg","selected","undefined","imageURI","setImageURI","isLoaded","setIsLoaded","itemRef","useRef","uri","encodeURIComponent","current","style","width","maxWidth","ref","src","alt","onLoad","Search","xmlns","viewBox","d","Copy","version","id","Download","fillRule","Check","SizeBtnControl","ITEM_SIZE","Gallery","selectedIcons","setSelectedIcons","renderIcons","setRenderIcons","selectedIndex","setSelectedIndex","searchFilter","setSearchFilter","maxCount","setMaxCount","itemSize","setItemSize","regex","RegExp","filter","match","filtered","icon","toLowerCase","includes","Icons","type","placeholder","onChange","event","target","e","slice","delta","fileDownload","require","Preview","copied","setCopied","interval","setInterval","clearInterval","text","onCopy","IconsGallery","a","fetch","response","json","fetchIconsData","then","data","catch","err","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df955214.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AppContext = React.createContext([{}, () => {}]);\n\nconst DEFAULT_STATE = {\n  appIsLoading: true,\n  icons: [], // ALL ICONS\n  categories: [\"All Icons\"],\n  selectedCategory: \"All Icons\",\n  iconToPreview: {},\n  tags: [], // ALL ICONS TAGS\n};\n\nconst AppContextProvider = (props) => {\n  const [state, setState] = React.useState(DEFAULT_STATE);\n\n  React.useEffect(() => {\n    //console.log(state.iconToPreview);\n  }, [state]);\n\n  return (\n    <AppContext.Provider value={[state, setState]}>\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n\nconst AppContextConsumer = AppContext.Consumer;\n\nexport { AppContext, AppContextProvider, AppContextConsumer };\n","import {DirTree} from \"./DirTree\";\nimport \"./DirTree.scss\";\nexport default DirTree;\n","import React, { useContext, useEffect } from \"react\";\nimport { AppContext } from \"../../hooks/useAppContext\";\nimport classNames from \"classnames\";\n\nexport const DirTree = () => {\n  const [appState, setAppState] = useContext(AppContext);\n\n  // EACH TIME ICONS DATA CHANGE\n  // REMAP CATEGORIES\n  useEffect(() => {\n    if (appState.icons.length > 0) {\n      const rootFolders = [\n        ...new Set(\n          appState.icons.map((item) =>\n            item.path.substring(0, item.path.substring(1).indexOf(\"/\") + 1)\n          )\n        ),\n      ];\n\n      setAppState((appState) => ({\n        ...appState,\n        categories: [...appState.categories, ...rootFolders],\n      }));\n      console.log(\"Categories were set...\");\n    }\n  }, [appState.icons]);\n\n  return (\n    <nav className=\"prd-dir-tree\">\n      <ul className=\"categories-list\">\n        {appState.categories.map((item, index) => {\n          return (\n            <li\n              key={index}\n              className={classNames(\"category-item\", {\n                \"is-selected\": item === appState.selectedCategory,\n              })}\n              onClick={() => {\n                setAppState({ ...appState, selectedCategory: item });\n              }}\n            >\n              {item}\n            </li>\n          );\n        })}\n      </ul>\n    </nav>\n  );\n};\n\n// {JSON.stringify(data, null, 2)}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\n\nexport const GalleryItem = ({ name, size, svg, selected, onClick }) => {\n  const [imageURI, setImageURI] = useState(undefined);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const itemRef = useRef(null);\n\n  useEffect(() => {\n    if (svg) {\n      const uri = `data:image/svg+xml,${encodeURIComponent(svg)}`;\n      setImageURI(uri);\n    }\n  }, [svg]);\n\n  useEffect(() => {\n    if (itemRef) {\n      itemRef.current.style.width = size;\n      itemRef.current.style.maxWidth = size;\n    }\n  }, [size]);\n\n  return (\n    <div\n      className={classNames(\n        \"gallery-item\",\n        { \"is-selected\": isLoaded && selected },\n        { \"show-icon\": isLoaded }\n      )}\n      onClick={onClick}\n      ref={itemRef}\n    >\n      <div className=\"icon-container\">\n        <img src={imageURI} alt=\"icon\" onLoad={() => setIsLoaded(true)} />\n      </div>\n      <span className=\"icon-name\">{name}</span>\n    </div>\n  );\n};\n\n// const areEqual = (prevIcon, nextIcon) => {\n//   return prevIcon.name === nextIcon.name && prevIcon.svg === nextIcon.svg;\n// };\n\nexport const MemoGalleryItem = React.memo(GalleryItem);\n","import React from \"react\";\n\nexport const Search = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 56.966 56.966\">\n    <path d=\"M55.146 51.887L41.588 37.786c3.486-4.144 5.396-9.358 5.396-14.786 0-12.682-10.318-23-23-23s-23 10.318-23 23 10.318 23 23 23c4.761 0 9.298-1.436 13.177-4.162l13.661 14.208c.571.593 1.339.92 2.162.92.779 0 1.518-.297 2.079-.837 1.192-1.147 1.23-3.049.083-4.242zM23.984 6c9.374 0 17 7.626 17 17s-7.626 17-17 17-17-7.626-17-17 7.626-17 17-17z\" />\n  </svg>\n);\n\nexport const Copy = (\n  <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n    <path d=\"M3 10H2V2h8v1h2V1c0-.6-.4-1-1-1H1C.4 0 0 .4 0 1v10c0 .6.4 1 1 1h2v-2z\" />\n    <path\n      id=\"Rectangle_14888_1_\"\n      d=\"M5 4h10c.6 0 1 .4 1 1v10c0 .6-.4 1-1 1H5c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1z\"\n    />\n  </svg>\n);\n\nexport const Download = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n    <path\n      d=\"M1.011 15.01L1.016 12l2 .008v1h10.007v-1.022l1.973.022v3H1.011zm7.054-3.09L4.026 6.979h2.99V1h2v5.979h3.011z\"\n      fillRule=\"evenodd\"\n    />\n  </svg>\n);\n\nexport const Check = (\n  <svg viewBox=\"0 -46 417.813 417\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M159.988 318.582c-3.988 4.012-9.43 6.25-15.082 6.25s-11.094-2.238-15.082-6.25L9.375 198.113c-12.5-12.5-12.5-32.77 0-45.246l15.082-15.086c12.504-12.5 32.75-12.5 45.25 0l75.2 75.203L348.104 9.781c12.504-12.5 32.77-12.5 45.25 0l15.082 15.086c12.5 12.5 12.5 32.766 0 45.246zm0 0\" />\n  </svg>\n);\n","import React from \"react\";\nimport className from \"classnames\";\n\nimport \"./SizeBtnControl.scss\";\n\nexport const SizeBtnControl = ({ size, onClick }) => {\n  return (\n    <div className=\"size-btn-wrapper\">\n      <div\n        id=\"btn-small\"\n        className={className(\"size-btn small\", { selected: size === \"5%\" })}\n        onClick={onClick}\n      />\n      <div\n        id=\"btn-medium\"\n        className={className(\"size-btn medium\", {\n          selected: size === \"10%\",\n        })}\n        onClick={onClick}\n      />\n      <div\n        id=\"btn-large\"\n        className={className(\"size-btn large\", { selected: size === \"20%\" })}\n        onClick={onClick}\n      />\n    </div>\n  );\n};\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { AppContext } from \"../../hooks/useAppContext\";\nimport { MemoGalleryItem } from \"../GalleryItem\";\nimport classNames from \"classnames\";\nimport * as Icons from \"../../style/icons\";\nimport { SizeBtnControl } from \"./SizeBtnControl\";\n\nconst MAX_ICONS_TO_DISPLAY = 200;\nconst ITEM_SIZE = { small: \"5%\", medium: \"10%\", large: \"20%\" };\n\nexport const Gallery = () => {\n  const [appState, setAppState] = useContext(AppContext);\n  const [selectedIcons, setSelectedIcons] = useState([]);\n  const [renderIcons, setRenderIcons] = useState([{}]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [searchFilter, setSearchFilter] = useState(\"\");\n  const [maxCount, setMaxCount] = useState(MAX_ICONS_TO_DISPLAY);\n  const [itemSize, setItemSize] = useState(ITEM_SIZE.medium);\n\n  useEffect(() => {\n    setSelectedIcons([]);\n    setRenderIcons([{}]);\n    setSelectedIndex(0);\n    setSearchFilter(\"\");\n    setMaxCount(MAX_ICONS_TO_DISPLAY);\n  }, [appState.icons, appState.selectedCategory]);\n\n  // PLACE SELECTED CATEGORY INTO SELECTED ICONS\n  // WHEN DONE COPY TO RENDER ICONS TO RENDER THEM\n  useEffect(() => {\n    if (selectedIcons.length === 0) {\n      if (appState.selectedCategory !== \"All Icons\") {\n        let regex = new RegExp(appState.selectedCategory + \"/\", \"g\");\n        const selected = appState.icons.filter((item) =>\n          item.path.match(regex)\n        );\n        setSelectedIcons(selected);\n      } else {\n        setSelectedIcons(appState.icons);\n      }\n    } else {\n      setRenderIcons(selectedIcons);\n    }\n  }, [selectedIcons]);\n\n  // WHEN EVER RENDER ICONS ARE CHANGED\n  // GALLERY SELECTED INDEX === 0\n  // UPDATE APP STATE WITH SELECTED ICON\n  useEffect(() => {\n    setSelectedIndex(0);\n    setAppState((appState) => ({\n      ...appState,\n      iconToPreview: renderIcons[0] || {},\n    }));\n  }, [renderIcons]);\n\n  // WHENEVER GALLERY SELECTED INDEX IS CHANGED\n  // UPDATE APP STATE WITH SELECTED ICON\n  useEffect(() => {\n    setAppState((appState) => ({\n      ...appState,\n      iconToPreview: renderIcons[selectedIndex],\n    }));\n  }, [selectedIndex]);\n\n  // FILTER RENDER ICONS WITH SEARCH PARAMS\n  useEffect(() => {\n    if (searchFilter !== \"\") {\n      const filtered = selectedIcons.filter((icon) =>\n        icon.name.toLowerCase().includes(searchFilter.toLowerCase())\n      );\n      setRenderIcons(filtered);\n    } else {\n      setRenderIcons(selectedIcons);\n    }\n  }, [searchFilter]);\n\n  const handleSizeBtnChange = (e) => {\n    switch (e.target.id) {\n      case \"btn-small\":\n        setItemSize(ITEM_SIZE.small);\n        break;\n\n      case \"btn-medium\":\n        setItemSize(ITEM_SIZE.medium);\n        break;\n\n      case \"btn-large\":\n        setItemSize(ITEM_SIZE.large);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <section className=\"prd-gallery\">\n      <div className=\"search-container\">\n        <div className=\"input-wrapper\">\n          {searchFilter === \"\" ? (\n            <span className=\"search-icon\">{Icons.Search}</span>\n          ) : null}\n          <input\n            type=\"text\"\n            placeholder=\"Search icons ...\"\n            value={searchFilter}\n            onChange={(event) => setSearchFilter(event.target.value)}\n          />\n          <span>{renderIcons.length}</span>\n        </div>\n        <SizeBtnControl size={itemSize} onClick={handleSizeBtnChange} />\n      </div>\n      <div className=\"gallery-scroll\">\n        <div className=\"icons-grid\">\n          {renderIcons.slice(0, maxCount).map((item = {}, index) => (\n            <MemoGalleryItem\n              key={index}\n              name={item.name}\n              size={itemSize}\n              svg={item.svg}\n              selected={index === selectedIndex}\n              onClick={() => setSelectedIndex(index)}\n            />\n          ))}\n        </div>\n        <div\n          className={classNames(\"show-more\", {\n            \"is-visible\": renderIcons.length > MAX_ICONS_TO_DISPLAY,\n          })}\n        >\n          <span>Showing 1 - {maxCount + 1}</span>\n          <span\n            className=\"more-btn\"\n            onClick={() => {\n              if (maxCount + 100 < renderIcons.length) {\n                setMaxCount((maxCount) => maxCount + MAX_ICONS_TO_DISPLAY);\n              } else {\n                const delta = renderIcons.length - maxCount;\n                setMaxCount((maxCount) => maxCount + delta);\n              }\n            }}\n          >\n            Load More...\n          </span>\n        </div>\n      </div>\n    </section>\n  );\n};\n","import { Gallery } from \"./Gallery\";\nimport \"./Gallery.scss\";\nexport default Gallery;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { AppContext } from \"../../hooks/useAppContext\";\nimport classNames from \"classnames\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport * as Icons from \"../../style/icons\";\nconst fileDownload = require(\"js-file-download\");\n\nexport const Preview = () => {\n  const [{ iconToPreview }] = useContext(AppContext);\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (copied) {\n      const interval = setInterval(() => {\n        setCopied(false);\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [copied]);\n\n  return (\n    <aside className=\"prd-preview\">\n      {iconToPreview.svg && iconToPreview.svg !== \"\" ? (\n        <>\n          <div\n            className={classNames(\"icon-preview\", {\n              \"show-preview\":\n                iconToPreview !== undefined && iconToPreview.svg !== undefined,\n            })}\n          >\n            <div className=\"ratio-container\">\n              <div className=\"inner-container\">\n                <img\n                  src={`data:image/svg+xml,${encodeURIComponent(\n                    iconToPreview.svg\n                  )}`}\n                  alt=\"selected icon\"\n                />\n              </div>\n            </div>\n            <span className=\"icon-name\">{iconToPreview.name}</span>\n          </div>\n          <div className=\"preview-actions\">\n            <CopyToClipboard\n              text={iconToPreview.svg}\n              onCopy={() => setCopied(true)}\n            >\n              <button\n                onClick={() => setCopied(true)}\n                className={classNames({ \"is-copied\": copied })}\n              >\n                {copied ? (\n                  <span className=\"icon-wrapper\">\n                    {Icons.Check}\n                    <span>Copied</span>\n                  </span>\n                ) : (\n                  <span className=\"icon-wrapper\">\n                    {Icons.Copy}\n                    <span>Copy</span>\n                  </span>\n                )}\n              </button>\n            </CopyToClipboard>\n            <button\n              onClick={() =>\n                fileDownload(iconToPreview.svg, `${iconToPreview.name}.svg`)\n              }\n            >\n              <span className=\"icon-wrapper\">\n                {Icons.Download}\n                <span>Download</span>\n              </span>\n            </button>\n          </div>\n        </>\n      ) : (\n        <span className=\"no-preview-msg\">Preview is not available</span>\n      )}\n    </aside>\n  );\n};\n","import { Preview } from \"./Preview\";\nimport \"./Preview.scss\";\nexport default Preview;\n","import {IconsGallery} from \"./IconsGallery\";\nimport \"./IconsGallery.scss\";\nexport default IconsGallery;\n","import React, { useContext, useEffect } from \"react\";\nimport { AppContext } from \"../../hooks/useAppContext\";\nimport DirTree from \"../../components/DirTree\";\nimport Gallery from \"../../components/Gallery\";\nimport Preview from \"../../components/Preview\";\n\nexport const IconsGallery = () => {\n  const [appState, setAppState] = useContext(AppContext);\n\n  useEffect(() => {\n    // FETCHING ICONS\n    const fetchIconsData = async () => {\n      const response = await fetch(\"./icons.json\");\n      const json = await response.json();\n      return json;\n    };\n\n    fetchIconsData()\n      .then((data) => {\n        console.log(\"Icons data was loaded...\");\n        //setAppState((appState) => ({ ...appState, icons: data }));\n        setAppState({ ...appState, icons: data });\n      })\n      .catch((err) => console.log(\"Error fetching icons data...\", err));\n  }, []);\n\n  return (\n    <article className=\"prd-icons-gallery\">\n      <DirTree />\n      <Gallery />\n      <Preview />\n    </article>\n  );\n};\n\n// FETCHING TAGS\n// const fetchTagsData = async () => {\n//   const respone = await fetch(\"./tags.json\");\n//   const json = respone.json();\n//   return json;\n// };\n\n// fetchTagsData()\n//   .then(data => {\n//     console.log(\"Tags were loaded ...\");\n//     setAppState(appState => ({ ...appState, tags: data }));\n//   })\n//   .catch(err => console.log(\"Error fetching tags data ...\", err));\n","import React from \"react\";\nimport IconsGallery from \"../IconsGallery\";\n\nconst App = () => {\n  return (\n    <main className=\"App\">\n      <IconsGallery />\n    </main>\n  );\n};\n\nexport default App;\n","import App from \"./App\";\nimport \"./App.scss\";\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport { AppContextProvider } from \"./hooks/useAppContext\";\nimport \"./style/reset.scss\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <AppContextProvider>\n    <App />\n  </AppContextProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}